Streaming Notes and How-To
==========================

SERVER:
-------

* Download and Installation

  The streaming used for the Video Hack is tested with the Red5 Media Server 1.0.1
  (see http://www.red5.org/, download from http://www.red5.org/downloads/red5/1_0_1/).

  Currently the Video Hack makes use of the "oflaDemo" application provided with Red5.
  In case it is not installed with your download you will have to install it using the
  "Installer" application of Red5.



* Stream parameters for the Video Hack

  The Video Hack uses the RTMP protocol for which Adobe Flash can do streaming.

  A stream has always the following parameters:
  - Stream server address consisting of a hostname with an optionally application path
    or port number (e.g. "rtmp://localhost:1935/oflaDemo")
  - The stream name (e.g. "mystream")
  - Alternative way of writing a stream url is rtmp://<host>:<port>/<appname>/<streamname>



* Supported codecs

  Adobe Flash supports at least the following combinations of video and audio codecs:
  - VP6 for video mp3 for audio
  - h.264 for video and mp4a or mp3 for audio

  You find further in-depth information about supported codecs here (starting at page 12):
  http://red5.googlecode.com/files/1827OS_04_1stDraft.pdf



* Bitrates and networking

  The most important thing to take care of is the network bandwidth both your clients and
  your server have to ensure continuous streaming in constant quality.

  You can predict how many streams your server will be able to handle for broadcasting to
  clients and you also can predict how many streams you can send to your streaming server.  

  In theory you can always use the following formula:

                                       total bandwidth
  number of possible streams =  ----------------------------
                                 bitrate of a single stream

  Each stream you put on stage in UpStage will occupy a connection to your server for
  each client.

  For example:

  You have a 100 MBit/s internet up- and downstream connection on your server, each
  stream you are broadcasting has 500 kBit/s. You have 20 users (players and audience) and
  you want to show 2 streams in parallel. The location where you are streaming from has
  a asynchronous internet connection (e.g. DSL) and provides 6 MBit/s for Downstream and
  1 MBit/s for upstream.

  With the formula above you can now predict how many streams you will be able to handle
  on the server side and on the client side.

  - Maximum number of streams you can broadcast (server):

       100 MBit/s          100 MBit/s
    ---------------  =  --------------- = 200 streams broadcasted in parallel
       500 kBit/s          0.5 MBit/s

  - Actual number of streams you currently broadcast (server):

    20 watching users * 2 simultaneous streams = 40 streams sent in parallel
  
  - Actual bandwidth used for broadcasting (server):

    40 streams * 500 kBit/s =  20 MBit/s used bandwidth for streaming 

  - Current maximum streams you can send (client):

       1 Mbit/s
    -------------- = maximum 2 streams broadcasted simultaneously
      0.5 MBit/s

   - Maximum number of stream you are able to receive (client):

       6 MBit/s
     ------------- = 12 streams received in parallel (equals 6 users with each 2 streams)
      0.5 MBit/s

  In practice you should take care not to exceed those limits as the stream will get lagged
  and interrupted. At least you should take care to have a little buffer in your network
  bandwidths to be able to cope with peak loads during streaming (e.g. use only up to 80%
  of your theoretical available bandwidth).
  
  And for sure you should be aware that all users at a location who share the internet line
  also share the bandwidth.

  You can find out what your current bandwidth actually is by using a various webservices,
  e.g. http://speedtest.net/. You should let run such a test at least two or three times to
  get to know the avarage bandwidth rate. 






CLIENTS:
--------

There are several possibilities to stream from your computer to Red5.



* Red5 Publisher

For now the easiest is to make use of the provided web interface of the Red5 Media
Server called Publisher. You find it in the demos of your Red5 installation
(e.g. http://localhost:5080/demos/publisher.html).
The current downside of this web interface is that it provides very poor stream quality.
So if you want to have best possible quality and bitrates you should choose one of the
following alternatives below.



* Flash Media Live Encoder (FMLE)

If you are using Windows or MacOSX the easiest is to use the Flash Media Live Encoder.
You can download it for free from the Adobe site:
https://www.adobe.com/products/flash-media-encoder.html



* VideoLan Client (VLC)

On Linux (but also on Windows or MacOSX) you can use the open-source video solution
VideoLan media player (https://videolan.org/vlc/). In order to stream you can use the
VLC client from command line.

Basically you have to capture your input somewhere and then transcode the data, mux
it into a container and stream it using the RTMP protocol.

The example shell script 'avstream_vlc_linux_example.sh' gives you a quick insight how
streaming using VLC can be done from command line. If you know what you are doing feel
free to change the parameters.

In case you need more information about VLC parameters and usage you will find further
documentation under the following links:
- http://www.jpsaman.org/vlc/rtmp
- https://www.videolan.org/doc/streaming-howto/en/ch03.html
- http://wiki.videolan.org/Documentation:Modules/v4l2



* FFmpeg

Streaming using FFmpeg (http://www.ffmpeg.org/) directly has not been tested yet. Because
VLC also uses FFmpeg for transcoding it probably should also work when using FFmpeg directly.

Here are some links where you may find useful information:
- http://ffmpeg.org/trac/ffmpeg/wiki/StreamingGuide
- http://wiki.xuggle.com/Live_Encoding_Tutorial

